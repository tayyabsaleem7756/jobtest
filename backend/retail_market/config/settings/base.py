"""
Django settings for retail_market project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os

from corsheaders.defaults import default_headers
from environ import environ
from sentry_sdk.integrations.django import DjangoIntegration

from api.constants.headers import API_KEY_HEADER, VIEW_AS_COMPANY_USER_ID, SHOW_UNPUBLISHED_FUNDS
from config.settings.sentry import SENTRY_DSN

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
environ.Env.read_env(BASE_DIR + '/../.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'corsheaders',
    'rest_framework',
    'rest_framework_jwt',
    'rest_framework_jwt.blacklist',
    'simple_history',
    'django_filters',
    'health_check',
    'health_check.db',
    'health_check.contrib.migrations',
    'core',
    'encrypted_fields',
    'django_q',
    'api',
    'api.users',
    'api.admin_users',
    'api.companies',
    'api.funds.apps.FundsConfig',
    'api.investors',
    'api.notifications',
    'api.capital_calls',
    'api.distribution_notices',
    'api.documents',
    'api.currencies',
    'api.health',
    'api.activities.apps.ActivitiesConfig',
    'api.partners',
    'api.payments',
    'api.eligibility_criteria.apps.EligibilityCriteriaConfig',
    'api.geographics',
    'api.fund_marketing_pages',
    'api.cards',
    'api.kyc_records',
    'api.comments',
    'api.workflows',
    'api.analytics',
    'api.interest_statements',
    'api.tax_records',
    'api.applications',
    'api.agreements',
    'api.backup',
    'channels',
    'mathfilters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.RemoteUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.libs.middlewares.company_token_middleware.CompanyTokenMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'api.libs.middlewares.request_log.RequestLogMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'api.libs.backends.remote_user_backend.CustomRemoteUserBackend',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'
AUTH_USER_MODEL = 'users.RetailUser'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT'),
        'OPTIONS': {'sslmode': 'require'},
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env('CACHE_REDIS_URL'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR,'../static/')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR,'../staticfiles/'),
)

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    API_KEY_HEADER,
    VIEW_AS_COMPANY_USER_ID,
    SHOW_UNPUBLISHED_FUNDS
]

AUTH0_DOMAIN = env.str('AUTH0_DOMAIN', '')
AUTH0_MANAGEMENT_API_DOMAIN = env.str('AUTH0_MANAGEMENT_API_DOMAIN', '')
AUTH0_NON_INTERACTIVE_CLIENT_ID = env.str('AUTH0_NON_INTERACTIVE_CLIENT_ID', '')
AUTH0_NON_INTERACTIVE_CLIENT_SECRET = env.str('AUTH0_NON_INTERACTIVE_CLIENT_SECRET', '')
AUTH0_CONNECTION = env.str('AUTH0_CONNECTION', '')
AUTH0_ALGO = env.str('AUTH0_ALGO', '')
AUTH0_API_IDENTIFIER = env.str('AUTH0_API_IDENTIFIER', '')
AUTH0_AUTH_PREFIX = env.str('AUTH0_AUTH_PREFIX', '')

JWT_AUTH = {
    'JWT_PAYLOAD_GET_USERNAME_HANDLER':
        'api.libs.auth0.jwt.jwt_get_username_from_payload_handler',
    'JWT_DECODE_HANDLER':
        'api.libs.auth0.jwt.jwt_decode_token',
    'JWT_ALGORITHM': AUTH0_ALGO,
    'JWT_AUDIENCE': AUTH0_API_IDENTIFIER,
    'JWT_ISSUER': AUTH0_DOMAIN,
    'JWT_AUTH_HEADER_PREFIX': AUTH0_AUTH_PREFIX,
}

SENDGRID_API_KEY = env.str('SENDGRID_API_KEY', '')
FROM_EMAIL = env.str('FROM_EMAIL', 'The SideCar Team<updates@sharesurround.com>')
SEND_EMAIL = env.bool('SEND_EMAIL', default=False)
FE_APP_URL = env.str('FE_APP_URL', '')
PUBLIC_MARKET_PLACE_FE_APP_URL = env.str('PUBLIC_MARKET_PLACE_FE_APP_URL', '')
ADMIN_APP_URL = env.str("ADMIN_APP_URL", "")

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_STORAGE_BUCKET_NAME = env('AWS_PUBLIC_ASSETS_BUCKET', default=None)
AWS_S3_CUSTOM_DOMAIN = env('AWS_PUBLIC_ASSETS_CLOUDFRONT_DOMAIN', default=None)
AWS_S3_ENDPOINT_URL = env('AWS_PUBLIC_ASSETS_ENDPOINT', default=None)

# Set this up so we can add a new key later in a different ENV VAR
# that's why the env is singular and the setting is plural.
FIELD_ENCRYPTION_KEYS = [env('FIELD_ENCRYPTION_KEY')]


class AWS:
    """All the config for AWS in one place"""
    local = env('AWS_LOCAL', default='false') == "true"
    document_bucket = env('AWS_DOCUMENT_BUCKET', default=None)
    document_kms_key_id = env('AWS_DOCUMENT_KMS_KEY_ID', default=None)
    backup_bucket = env('AWS_DOCUMENT_BUCKET', default=None)


DOCU_SIGN = {
    'pkey_path' : env('DS_PKEY_PATH', default = './config/ds_private.key'),
    'auth_server': env('DS_AUTH_SERVER', default = None),
    'client_id': env('DS_CLIENT_ID', default = None),
    'impersonated_user_id': env('DS_IMPERSONATED_USER_ID', default = None),
    'authentication_method': env('DS_AUTHENTICATION_METHOD', default = "Password"),
}

APP_ENVIRONMENT = os.environ.get('APP_ENVIRONMENT', 'local')

APPLICATION_RESET_ENVIRONMENTS = [
    'local',
    'dev',
    'stage'
]

Q_CLUSTER = {
    'sync': False,
    'name': 'sidecar-cluster',
    'workers': 2,
    'recycle': 50,
    'timeout': 300,
    'retry': 600,
    'save_limit': 250,
    'cpu_affinity': 1,
    'label': 'Sidecar',
    'orm': 'default',
    'bulk': 10,
    'ack_failures': True,
    'max_attempts': 3,
}

# if SENTRY_DSN and current_env != 'local':
#     Q_CLUSTER['error_reporter'] = {
#         'sentry': {
#             'dsn': SENTRY_DSN,
#             'integrations': [DjangoIntegration()],
#             'traces_sampler': 'traces_sampler',
#             # Do not send PII to sentry
#             'send_default_pii': False,
#             # Send the Environment
#             'environment': current_env,
#             'release': os.environ.get("RELEASE_TAG", "unknown")
#         }
#     }

# Channels
ASGI_APPLICATION = 'config.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [env("CACHE_REDIS_URL")],
        },
    },
}

# Logging config

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

USE_THOUSAND_SEPARATOR = True
