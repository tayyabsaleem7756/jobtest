# Generated by Django 3.2.13 on 2022-06-21 07:50

from django.db import migrations
from django.db.transaction import atomic

from api.cards.utils import get_fund_kyc_workflow_name
from api.constants.kyc_investor_types import KYCInvestorType
from api.cards.models import Workflow as RawKycWorkflow


def migrate_individual_work_flows_to_company(apps, schema_editor):
    with atomic():
        Company = apps.get_model('companies', 'Company')
        CompanyUser = apps.get_model('companies', 'CompanyUser')
        Application = apps.get_model('applications', 'Application')
        KycWorkFlow = apps.get_model('cards', 'Workflow')
        KYCRecord = apps.get_model('kyc_records', 'KYCRecord')
        _companies = Company.objects.all()
        for _company in _companies:
            name = get_fund_kyc_workflow_name(
                company=_company,
                vehicle_type=KYCInvestorType.INDIVIDUAL.name
            )
            try:
                existing_individual_workflow = KycWorkFlow.objects.get(
                    fund=None,
                    name=name,
                    company=_company
                )
            except KycWorkFlow.DoesNotExist:
                existing_individual_workflow = None

            individual_workflow_ids = KycWorkFlow.objects.filter(
                fund__isnull=False,
                name__istartswith='KYC / AML individual',
                company_id=_company.id,
                type=RawKycWorkflow.FLOW_TYPES.KYC.value
            ).order_by('-created_at')

            if not individual_workflow_ids.exists():
                continue

            individual_workflow_ids = list(individual_workflow_ids.values_list('id', flat=True))

            if existing_individual_workflow:
                ids_to_delete = individual_workflow_ids
                workflow_id = existing_individual_workflow.id
            else:
                ids_to_delete = individual_workflow_ids[:-1]
                workflow_id = individual_workflow_ids[-1]
                workflow = KycWorkFlow.objects.get(id=workflow_id)
                workflow.fund = None
                workflow.name = name
                workflow.save()

            KYCRecord.objects.filter(workflow_id__in=ids_to_delete).update(workflow_id=workflow_id)
            company_users = CompanyUser.objects.filter(company_id=_company.id)
            for company_user in company_users:
                kyc_records = KYCRecord.objects.filter(
                    kyc_investor_type=KYCInvestorType.INDIVIDUAL,
                    company_id=_company.id,
                    user_id=company_user.user_id
                ).order_by('-created_at').values_list('id', flat=True)

                kyc_records = list(kyc_records)
                if len(kyc_records) < 2:
                    continue

                kyc_record_to_keep = kyc_records[-1]
                kyc_records_to_delete = kyc_records[:-1]

                Application.objects.filter(kyc_record_id__in=kyc_records_to_delete).update(
                    kyc_record_id=kyc_record_to_keep
                )
                KYCRecord.objects.filter(id__in=kyc_records_to_delete).delete()

            KycWorkFlow.objects.filter(id__in=ids_to_delete).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('cards', '0011_auto_20220511_0322'),
    ]

    operations = [
        migrations.RunPython(migrate_individual_work_flows_to_company)
    ]
