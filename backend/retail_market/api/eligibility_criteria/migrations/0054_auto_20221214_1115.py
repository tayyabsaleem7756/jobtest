# Generated by Django 3.2.15 on 2022-12-14 11:15

from django.db import migrations

from api.eligibility_criteria.services.admin.add_custom_logic_block import CustomLogicBlockService


def is_eligibility_block(criteria_block):
    return not (
            criteria_block.is_custom_logic_block or
            criteria_block.is_final_step or
            criteria_block.is_country_selector or
            criteria_block.is_investor_type_selector or
            criteria_block.is_user_documents_step or (
                    criteria_block.block and criteria_block.block.is_admin_only
            )
    )

def block_title(criteria_block):
    if criteria_block.custom_block:
        return criteria_block.custom_block.title
    if criteria_block.block:
        return criteria_block.block.heading
    return ''


def calculate_custom_expressions(apps, schema_editor):
    FundEligibilityCriteria = apps.get_model('eligibility_criteria', 'FundEligibilityCriteria')
    CriteriaBlock = apps.get_model('eligibility_criteria', 'CriteriaBlock')
    for criteria in FundEligibilityCriteria.objects.filter(
            expression_override__isnull=False
    ).exclude(expression_override=''):
        if criteria.custom_expression:
            return
        criteria_blocks = CriteriaBlock.objects.filter(criteria=criteria)
        expression = criteria.expression_override
        position_to_id_map = {}
        position_to_text_map = {}
        for criteria_block in criteria_blocks:
            if not is_eligibility_block(criteria_block) or not criteria_block.position:
                continue
            position_to_id_map[str(criteria_block.position)] = criteria_block.id
            position_to_text_map[str(criteria_block.position)] = block_title(criteria_block)

        expression = expression.replace('(', ' ( ')
        expression = expression.replace(')', ' ) ')
        expression_tokens = []
        for token in expression.split():
            if token not in position_to_id_map:
                expression_tokens.append(
                    {'id': str(token), 'text': token}
                )
            else:
                expression_tokens.append({'id': position_to_id_map[token], 'text': position_to_text_map[token]})

        criteria.custom_expression = expression_tokens
        criteria.save(update_fields=['custom_expression'])
        CustomLogicBlockService(
            criteria=criteria,
            criteria_block_model=CriteriaBlock
        ).process(create_initial_expression=False)


class Migration(migrations.Migration):
    dependencies = [
        ('eligibility_criteria', '0053_fundeligibilitycriteria_custom_expression'),
    ]

    operations = [
        migrations.RunPython(calculate_custom_expressions, reverse_code=migrations.RunPython.noop),
    ]
